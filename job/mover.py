import os
import datetime
import argparse
import sqlite3

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
parser = argparse.ArgumentParser(description="Process daily tasks.")
parser.add_argument('--today', type=str, help='Date in YYYY-MM-DD format', required=False)
args = parser.parse_args()

# –ó–∞–¥–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏
NOTES_PATH = "/Users/user/Yandex.Disk-maksim.burdygin.localized/Obsidian vault/Daily"
TEMPLATE_PATH = "/Users/user/Yandex.Disk-maksim.burdygin.localized/Obsidian vault/Templates/Daily.md"

# –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—ã
if args.today:
    try:
        today = datetime.datetime.strptime(args.today, "%Y-%m-%d").date()
    except ValueError:
        print("Invalid date format. Use YYYY-MM-DD.")
        exit()
else:
    today = datetime.date.today()

yesterday = today - datetime.timedelta(days=1)

# –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
yesterday_file = yesterday.strftime("%Y-%m-%d") + ".md"
today_file = today.strftime("%Y-%m-%d") + ".md"

# –ü–æ–ª–Ω—ã–µ –ø—É—Ç–∏ –¥–æ —Ñ–∞–π–ª–æ–≤
yesterday_path = os.path.join(NOTES_PATH, yesterday_file)
today_path = os.path.join(NOTES_PATH, today_file)

# –ï—Å–ª–∏ —Ñ–∞–π–ª –≤—á–µ—Ä–∞—à–Ω–µ–π –∑–∞–º–µ—Ç–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not os.path.exists(yesterday_path):
    print(f"Yesterday's note ({yesterday_path}) does not exist.")
    exit()

# –°—á–∏—Ç—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω
template_content = ""
if os.path.exists(TEMPLATE_PATH):
    with open(TEMPLATE_PATH, 'r') as template_file:
        template_content = template_file.read()
else:
    print(f"Template file ({TEMPLATE_PATH}) does not exist.")
    exit()

y_tasks = []
tasks_to_remind = []
ignore_morning = False
ignore_evening = False

# –°—á–∏—Ç—ã–≤–∞–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏ –∑–∞ —É—Ç—Ä–µ–Ω–Ω—é—é –∏ –≤–µ—á–µ—Ä–Ω—é—é —Ä—É—Ç–∏–Ω—É
morning_stars = {}
evening_stars = {}

with open(yesterday_path, 'r') as yf:
    lines = yf.readlines()

    with open(yesterday_path, 'w') as yf:
        for line in lines:
            if line.startswith("### "):
                ignore_morning = False
                ignore_evening = False

            # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å–æ —Å–º–∞–π–ª–∏–∫–æ–º üë®üèº‚Äçüéì, –¥–æ–±–∞–≤–ª—è–µ–º –≤ tasks_to_remind
            if "üë®üèº‚Äçüéì" in line and (line.startswith("- [ ]") or line.startswith("- [x]")):
                print(f"line is {line}")
                tasks_to_remind.append(line)

            # –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ - –∑–∞–¥–∞—á–∞ –Ω–µ –∏–∑ —É—Ç—Ä–µ–Ω–Ω–Ω–µ–π –∏–ª–∏ –≤–µ—á–µ—Ä–Ω–µ–π —Ä—É—Ç–∏–Ω—ã, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –µ–µ
            if line.startswith("- [ ]") and not (ignore_morning or ignore_evening):
                y_tasks.append(line)
            elif not (ignore_morning or ignore_evening):
                yf.write(line)

            # –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ —É—Ç—Ä–∞ –∏–ª–∏ –≤–µ—á–µ—Ä–∞ - –æ—Å—Ç–∞–≤–ª—è–µ–º
            elif line.startswith("- [x]") and (ignore_morning or ignore_evening):
                yf.write(line)

            # —ç—Ç–æ—Ç –∏—Ñ –≤–Ω–∏–∑—É —á—Ç–æ–±—ã –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ —É–¥–∞–ª—è–ª–æ
            if line.strip() == "### Morning Routine":
                ignore_morning = True
            elif line.strip() == "### Evening Routine":
                ignore_evening = True

            # —Å—á–∏—Ç–∞–µ–º –∫–æ–ª-–≤–æ –∑–≤–µ–∑–¥ –≤ —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä—É—Ç–∏–Ω–µ
            if line.startswith("- [x]") and ignore_morning:
                parts = line.split(" ")
                task = parts[2]
                stars = line.count("‚≠êÔ∏è")
                morning_stars[task] = stars + 1

            # —Å—á–∏—Ç–∞–µ–º –∫–æ–ª-–≤–æ –∑–≤–µ–∑–¥ –≤ –≤–µ—á–µ—Ä–Ω–µ–π —Ä—É—Ç–∏–Ω–µ
            if line.startswith("- [x]") and ignore_evening:
                parts = line.split(" ")
                task = parts[2]
                stars = line.count("‚≠êÔ∏è")
                evening_stars[task] = stars + 1

# –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –∑–∞–º–µ—Ç–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
if not os.path.exists(today_path):
    with open(today_path, 'a') as f:
        f.write(template_content)
        f.write("\n")

with open(today_path, 'r') as tf:
    lines = tf.readlines()

# –§–ª–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ä–∞–∑–¥–µ–ª–∞ "### Yesterday Tasks"
has_section = any(line.strip() == "### Yesterday Tasks" for line in lines)

# –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª–∞ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
if not has_section:
    lines.append("### Yesterday Tasks\n")


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
conn = sqlite3.connect('taskreminder.db')
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS taskreminder (
    date TEXT,
    task TEXT
)
''')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á —Å–æ —Å–º–∞–π–ª–∏–∫–æ–º üë®üèº‚Äçüéì
for task in tasks_to_remind:
    if task.startswith("- [ ]"):
        task = task[5:]
    elif task.startswith("- [x]"):
        task = task[5:]

    task = task.strip()

    # –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –∏ –∑–µ–ª–µ–Ω–æ–π –≥–∞–ª–æ—á–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if "‚úÖ" in task:
        task = task.split("‚úÖ", 1)[0].strip()  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–æ –∑–µ–ª–µ–Ω–æ–π –≥–∞–ª–æ—á–∫–∏
    if "üë®üèº‚Äçüéì" in task:
        task = task.split("üë®üèº‚Äçüéì", 1)[0].strip()  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–æ —Å–º–∞–π–ª–∏–∫–∞ —Å–æ —à–ª—è–ø–∫–æ–π

    # –í—Å—Ç–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ –≤ SQLite –Ω–∞ —Ä–∞–∑–Ω—ã–µ –¥–∞—Ç—ã
    dates = [
        today,
        today + datetime.timedelta(days=1),
        today + datetime.timedelta(days=2),
        today + datetime.timedelta(days=7),
        today + datetime.timedelta(days=14),
        today + datetime.timedelta(days=30)
    ]
    print(f"date {dates}, task is {task}")
    for date in dates:
        cursor.execute('INSERT INTO taskreminder (date, task) VALUES (?, ?)', (date.strftime("%Y-%m-%d"), task))

# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ –∏ –≤ SQLite
with open(today_path, 'w') as tf:
    for line in lines:
        if line.startswith("- [ ]"):
            parts = line.split(" ")
            task = parts[3].strip()
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏ –∫ —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä—É—Ç–∏–Ω–µ (–∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –≤ —à–∞–±–ª–æ–Ω–µ)
            if task in morning_stars:
                stars = "‚≠êÔ∏è" * morning_stars[task]
                new_line = f"- [ ] {task} {stars}\n"
                tf.write(new_line)
            elif task in evening_stars:
                stars = "‚≠êÔ∏è" * evening_stars[task]
                new_line = f"- [ ] {task} {stars}\n"
                tf.write(new_line)
            else:
                tf.write(line)
        else:
            tf.write(line)
    for task in y_tasks:
        tf.write(task)

    # –í—ã–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute("SELECT task FROM taskreminder WHERE date = ?", (today,))
    tasks_from_db = cursor.fetchall()
    print(f"Tasks from db {tasks_from_db}, today is {today}")
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –≤ —Å–ø–∏—Å–æ–∫ y_tasks
    for task in tasks_from_db:
        tf.write(f"- [ ] {task[0]}\n")
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã taskreminder –ø–æ –µ—ë –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
        cursor.execute("DELETE FROM taskreminder WHERE task = ? and date = ?", (task[0], str(today)))

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
conn.commit()
conn.close()
